version: "3.4"

x-logging: &logging
  logging:
    driver: loki
    options:
      loki-url: "http://localhost:3100/loki/api/v1/push"

networks:
  cloudflared:
    driver: bridge
  loki:
    driver: bridge
  jaeger:
    driver: bridge    
  lan:
    driver: macvlan
    driver_opts:
      parent: "${NETWORK_ADAPTER}"
    ipam:
      config:
        - subnet: "${NETWORK_SUBNET}"

volumes:
  portainer_data:

services:
  traefik:
    <<: *logging
    restart: unless-stopped
    image: "traefik:v2.6.3"
    networks:
      - "cloudflared"
      - "jaeger"
    container_name: "traefik"
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--serverstransport.insecureskipverify=true"
      - "--certificatesresolvers.leresolver.acme.email=${EMAIL}"
      - "--certificatesresolvers.leresolver.acme.storage=./acme.json"
      - "--certificatesresolvers.leresolver.acme.dnsChallenge.provider=route53"
      - "--tracing.jaeger.localAgentHostPort=jaeger:6831"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${CF_DOMAIN}`)"
      - "traefik.http.routers.dashboard.entrypoints=web"
      - "traefik.http.routers.dashboard.service=api@internal"
    ports:
      - "${NETWORK_DOCKER_IP}:80:80"
      - "${NETWORK_DOCKER_IP}:443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./acme.json:/acme.json"
    environment:
      - "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
      - "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
      - "AWS_HOSTED_ZONE_ID=${AWS_HOSTED_ZONE_ID}"

  jaeger:
    <<: *logging
    image: "jaegertracing/all-in-one:latest"
    networks:
      - "jaeger"
    ports:
      - "6831:6831/udp"
      - "16686:16686"

  cloudflared:
    <<: *logging
    restart: unless-stopped
    image: cloudflare/cloudflared:2022.4.1
    networks:
      - "cloudflared"
      - "loki"
    container_name: cloudflared
    command: "tunnel --no-autoupdate run --token ${CF_TUNNEL_TOKEN}"

  loki:
    <<: *logging
    restart: unless-stopped
    image: grafana/loki:2.5.0
    networks:
      - "loki"
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

  promtail:
    <<: *logging
    restart: unless-stopped
    image: grafana/promtail:2.5.0
    networks:
      - "loki"
    container_name: promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - "/var/log:/var/log"
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      # - "./apps/promtail/etc/promtail/promtail-config.yaml:/etc/promtail/promtail-config.yaml"

  # docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions
  grafana:
    <<: *logging
    restart: unless-stopped
    image: grafana/grafana-oss
    networks:
      - "cloudflared"
      - "loki"
      - "jaeger"
    user: "${PUID}"
    volumes:
      - "./apps/grafana/var/lib/grafana:/var/lib/grafana"
    environment:
      - "GF_AUTH_DISABLE_LOGIN_FORM=true"
      - "GF_AUTH_ANONYMOUS_ENABLED=true"
      - "GF_AUTH_ANONYMOUS_ORG_ROLE=Admin"
      - "GF_SECURITY_ALLOW_EMBEDDING=true"
      - "GF_SERVER_DOMAIN=grafana.${CF_DOMAIN}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cf-grafana.rule=Host(`grafana.${CF_DOMAIN}`)"
      - "traefik.http.routers.cf-grafana.entrypoints=web"
      - "traefik.http.services.cf-grafana.loadbalancer.server.port=3000"

  whoami:
    restart: unless-stopped
    image: "traefik/whoami"
    networks:
      - "cloudflared"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.${NETWORK_DOCKER_IP}.nip.io`)"
      - "traefik.http.routers.whoami.entrypoints=web"

  homeassistant:
    <<: *logging
    restart: unless-stopped
    image: homeassistant/home-assistant
    privileged: true
    network_mode: "host"
    container_name: homeassistant
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0
      - /dev/ttyUSB1:/dev/ttyUSB1
      - /dev/ttyACM0:/dev/ttyACM0
    volumes:
      - ./apps/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
      - /dev/serial/by-id/:/dev/serial/by-id/
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cf-homeassistant.rule=Host(`homeassistant.${CF_DOMAIN}`)"
      - "traefik.http.routers.cf-homeassistant.entrypoints=web"
      - "traefik.http.services.cf-homeassistant.loadbalancer.server.port=8123"

  portainer:
    <<: *logging
    restart: unless-stopped
    image: "portainer/portainer-ce:2.11.1"
    networks:
      - "cloudflared"
      - "loki"
    container_name: "portainer"
    command: -H unix:///var/run/docker.sock
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer_data:/data"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cf-portainer.rule=Host(`portainer.${CF_DOMAIN}`)"
      - "traefik.http.routers.cf-portainer.entrypoints=web"
      - "traefik.http.services.cf-portainer.loadbalancer.server.port=9000"

  transmission:
    <<: *logging
    restart: unless-stopped
    image: "lscr.io/linuxserver/transmission:3.00-r5-ls118"
    networks:
      - "cloudflared"
      - "loki"
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
    volumes:
      - "./media:/downloads:rw"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cf-transmission.rule=Host(`transmission.${CF_DOMAIN}`)"
      - "traefik.http.services.cf-transmission.loadbalancer.server.port=9091"
      - "traefik.http.routers.cf-transmission.entrypoints=web"

  minidlna:
    restart: unless-stopped
    networks:
      lan:
        ipv4_address: "${NETWORK_DLNA_IP}"
    image: "vladgh/minidlna:1.2.0"
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "MINIDLNA_MEDIA_DIR=/media"
    volumes:
      - "./media:/media:ro"
